import streamlit as st
import subprocess, os, glob
from ffmpeg_split import split_video
from convert_labelme_to_yolo_seg import convert_all
from pathlib import Path

st.set_page_config(page_title="PTF Logo Pipeline", layout="wide")
st.title("üöÄ PTF Logo Pipeline")

# --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è session_state ---
if "video_uploaded" not in st.session_state:
    st.session_state.video_uploaded = False
if "frames_extracted" not in st.session_state:
    st.session_state.frames_extracted = False
if "dataset_ready" not in st.session_state:
    st.session_state.dataset_ready = False
if "model_trained" not in st.session_state:
    st.session_state.model_trained = False
if "inpaint_done" not in st.session_state:
    st.session_state.inpaint_done = False

# --- –®–∞–≥ 1: –ó–∞–≥—Ä—É–∑–∫–∞ –≤–∏–¥–µ–æ ---
video = st.file_uploader("1Ô∏è‚É£ –ó–∞–≥—Ä—É–∑–∏—Ç—å –≤–∏–¥–µ–æ (MP4)", type="mp4")
if video:
    with open("input.mp4", "wb") as f:
        f.write(video.getbuffer())
    st.session_state.video_uploaded = True
    st.success("‚úÖ –í–∏–¥–µ–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –∫–∞–∫ input.mp4")

# --- –®–∞–≥ 2: –†–∞–∑–±–∏–≤–∫–∞ –Ω–∞ –∫–∞–¥—Ä—ã ---
if st.session_state.video_uploaded:
    if st.button("2Ô∏è‚É£ –†–∞–∑–±–∏—Ç—å –Ω–∞ –∫–∞–¥—Ä—ã (1 –∫–∞–¥—Ä/—Å–µ–∫)"):
        with st.spinner("–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∫–∞–¥—Ä–æ–≤..."):
            split_video("input.mp4", fps=1, out_dir="frames")
            st.session_state.frames_extracted = True
        st.success("üì∏ –ö–∞–¥—Ä—ã –∏–∑–≤–ª–µ—á–µ–Ω—ã –≤ –ø–∞–ø–∫—É frames/")
        st.image("frames/frame_0001.png", caption="–ü—Ä–∏–º–µ—Ä –∫–∞–¥—Ä–∞", width=200)

# --- –®–∞–≥ 3: –†–∞–∑–º–µ—Ç–∫–∞ –ª–æ–≥–æ—Ç–∏–ø–æ–≤ ---
if st.session_state.frames_extracted:
    st.markdown("### 3Ô∏è‚É£ –†–∞–∑–º–µ—Ç–∫–∞ –ª–æ–≥–æ—Ç–∏–ø–æ–≤")
    st.markdown("[üîó –û—Ç–∫—Ä—ã—Ç—å LabelMe Web](http://localhost:8080/)")

# --- –®–∞–≥ 4: –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è —Ä–∞–∑–º–µ—Ç–∫–∏ –≤ YOLOv8 —Ñ–æ—Ä–º–∞—Ç ---
if st.session_state.frames_extracted:
    if st.button("4Ô∏è‚É£ –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å —Ä–∞–∑–º–µ—Ç–∫—É ‚Üí YOLOv8"):
        with st.spinner("–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è..."):
            convert_all("labelme/json", "dataset")
            st.session_state.dataset_ready = True
        st.success("‚úÖ Dataset –≥–æ—Ç–æ–≤ –≤ –ø–∞–ø–∫–µ `dataset/`")

# --- –®–∞–≥ 5: –û–±—É—á–µ–Ω–∏–µ YOLOv8 ---
if st.session_state.dataset_ready:
    if st.button("5Ô∏è‚É£ –û–±—É—á–∏—Ç—å YOLOv8 (30 —ç–ø–æ—Ö)"):
        model_path = "/models/yolov8n-seg.pt"
        if not Path(model_path).exists():
            st.error(f"‚ùå –ú–æ–¥–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {model_path}")
        else:
            with st.spinner("–û–±—É—á–µ–Ω–∏–µ YOLO..."):
                cmd = f"yolo task=segment mode=train data=dataset/data.yaml model={model_path} epochs=30 imgsz=640"
                st.code(cmd)
                subprocess.run(cmd.split())
                st.session_state.model_trained = True
            st.success("üéØ –û–±—É—á–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ")

# --- –®–∞–≥ 6: –ò–Ω—Ñ–µ—Ä–µ–Ω—Å + Inpainting ---
if st.session_state.model_trained:
    if st.button("6Ô∏è‚É£ –ü—Ä–µ–¥—Å–∫–∞–∑–∞—Ç—å + Inpaint"):
        weight_path = "runs/segment/train/weights/best.pt"
        if not Path(weight_path).exists():
            st.error("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω —Ñ–∞–π–ª –º–æ–¥–µ–ª–∏: runs/segment/train/weights/best.pt")
        else:
            with st.spinner("üß† –ó–∞–ø—É—Å–∫ YOLOv8..."):
                cmd = f"yolo task=segment mode=predict model={weight_path} source=frames save=True"
                st.code(cmd)
                subprocess.run(cmd.split())

            with st.spinner("ü™Ñ –ó–∞–ø—É—Å–∫ inpainting..."):
                subprocess.run(["python", "replace_and_inpaint.py"])
                st.session_state.inpaint_done = True
            st.success("üßΩ Inpainting –∑–∞–≤–µ—Ä—à—ë–Ω ‚Äî —Å–º–æ—Ç—Ä–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –Ω–∏–∂–µ")

# --- –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–º–µ—Ä—ã —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ ---
if st.session_state.inpaint_done:
    st.markdown("### üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã inpainting")
    result_imgs = sorted(glob.glob("inpaint_outputs/*.png"))
    if result_imgs:
        cols = st.columns(3)
        for i, img_path in enumerate(result_imgs[:9]):
            with cols[i % 3]:
                st.image(img_path, caption=os.path.basename(img_path), use_column_width=True)
    else:
        st.warning("–ù–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –∫–∞–¥—Ä–æ–≤ –¥–ª—è –ø–æ–∫–∞–∑–∞.")
